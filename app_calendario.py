# -*- coding: utf-8 -*-
"""app_calendario.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1z0zUbe8W0gqeFC-oR38zGSSZb3Rm-_JU

**Programa para leer un archivo de Excel que contiene el calendario del año 2025 al 2027 con los días festivos de Colombia, donde podrá encontrar día y mes, semana del año, si es un día festivo o no, entre otros.**

Desarrollado por: Elizabeth Alzate Murillo - Apoyo IA
"""

#pip install streamlit

#pip install streamlit pandas openpyxl

import pandas as pd
import streamlit as st
from datetime import datetime

# Tu función para leer el Excel
@st.cache_data # Cachea los datos para que no se lean repetidamente cada vez que la app se actualiza
def leer_excel(ruta_archivo_excel, nombre_hoja=0, encabezado=0):
    try:
        df = pd.read_excel(ruta_archivo_excel, sheet_name='Fechas', header=encabezado, engine='openpyxl')
        return df
    except FileNotFoundError:
        st.error(f"Error: El archivo '{ruta_archivo_excel}' no fue encontrado. Verifica la ruta.")
        return None
    except ValueError as ve:
        st.error(f"Error en la lectura del archivo: {ve}. Verifica el nombre de la hoja o el formato.")
        return None
    except Exception as e:
        st.error(f"Ocurrió un error inesperado al leer el archivo: {e}")
        return None
        
# --- CONFIGURACIÓN DE LA APLICACIÓN STREAMLIT ---

st.set_page_config(
    page_title="Buscador de fechas en el calendario",
    page_icon="📅",
    layout="wide"
)

st.title("📅 Buscador de fechas en el calendario")
st.markdown("Desarrollado por: Elizabeth Alzate Murillo - Apoyo IA")
st.markdown("Consulta fechas específicas de Colombia en tu calendario del 2025 al 2027.")


ruta_excel = 'https://github.com/ElizabethAlzateM/mi_calendario_app/blob/main/Day_of_week.xlsx'
nombre_columna_fecha = 'Fecha'

# Leer el DataFrame al inicio de la aplicación
df_calendario = leer_excel(ruta_excel)

if df_calendario is not None:
    # Preparar la columna de fecha
    if nombre_columna_fecha in df_calendario.columns:
        df_calendario[nombre_columna_fecha] = pd.to_datetime(df_calendario[nombre_columna_fecha], errors='coerce')
        df_calendario.dropna(subset=[nombre_columna_fecha], inplace=True)
    else:
        st.error(f"Error fatal: La columna '{nombre_columna_fecha}' no se encontró en el DataFrame.")
        st.stop() # Detiene la ejecución de la app si falta la columna crítica

    # --- Selector de fecha interactivo ---
    fecha_seleccionada = st.date_input(
        "Selecciona una fecha:",
        value=datetime(2025, 1, 1),
        min_value=datetime(2025, 1, 1),
        max_value=datetime(2027, 12, 31)
    )

    if fecha_seleccionada:
        # Filtrar el DataFrame
        resultado_busqueda = df_calendario[df_calendario[nombre_columna_fecha].dt.date == fecha_seleccionada]

        # Mostrar resultados con mejor formato
        st.subheader(f"Información para la fecha: {fecha_seleccionada.strftime('%d/%m/%Y')}")

        if not resultado_busqueda.empty:
            # Convertir la columna de fecha a solo la parte de la fecha (sin hora)
            resultado_busqueda.loc[:, nombre_columna_fecha] = resultado_busqueda[nombre_columna_fecha].dt.date

            if resultado_busqueda.columns[0].startswith('Unnamed:'):
                resultado_busqueda = resultado_busqueda.drop(columns=[resultado_busqueda.columns[0]])

            st.dataframe(
                resultado_busqueda.reset_index(drop=True),
                height=45,
                use_container_width=True
            )

        else:
            st.info(f"No se encontraron datos para la fecha {fecha_seleccionada.strftime('%d/%m/%Y')} en el calendario.")
            st.warning("Verifica que la fecha esté dentro del rango de tu archivo Excel (2025-2027).")
